// To compile and upload...
// USB:        nbc -d -S=usb nxt.nxc
// Bluetooth:  nbc -d -S=BTH:M1 nxt.nxc

#include "lib.nxc"
#include "PSP-Nx-lib-edit.nxc"

//#define ENABLE_PID_TUNE

const byte INBOX  = 1;
const byte OUTBOX = 2;
const byte ADDR = 0x02;

const byte PSP_PORT = IN_1;
const byte MOTOR_PHI = OUT_A;
const byte MOTOR_TH  = OUT_B;

const char MOTOR_PHI_POLARITY = 1;
const char MOTOR_TH_POLARITY  = -1;
const int  MOTOR_PHI_PWR = 200;
const int  MOTOR_TH_PWR  = 100;

const float GRAVITY_FACTOR = 2.0;

const float CAMERA_PHI = PI / 6;
const float XY_SCALE = CAMERA_PHI / 2;

const float HOME_PHI = 0.0;
const float HOME_TH  = PI / 2;

const float MOTOR_PHI_GEAR_RATIO = 8.0 / 40.0;
const float MOTOR_TH_GEAR_RATIO  = 8.0 / 24.0;

Angle2 curr_pos;
int pwr_phi = 0;
int pwr_th  = 0;
long encoder_home_phi = 0;
long encoder_home_th  = 0;

struct InputState {
	bool critical_stop;
	bool pwr_override;
	bool set_home;
	char phi;
	char th;
};

// BADJOKE Declare structure theorem for Principal Ideal Domains
struct PID {
	float kp;
	float ki;
	float kd;
	float ki_decay;

	float err;
	float err_integral;
	float err_derivative;
};

// TODO BADCODE
PID pid_phi;
PID pid_th;

PID PID_init(float kp, float ki, float kd, float ki_decay=0.0) {
	PID pid;
	pid.kp = kp;
	pid.ki = ki;
	pid.kd = kd;
	pid.ki_decay = ki_decay;
	pid.err = 0.0;
	pid.err_integral = 0.0;
	pid.err_derivative = 0.0;
	return pid;
}

// TODO consider non-float for better accuracy
// TODO integral normalization/decay term (e.g. 1 - 0.5 * dt)?
float PID_next(PID& pid, float err, float dt) {
	if (dt > 0.0) {
		pid.err_derivative = (err - pid.err) / dt;
		pid.err_integral *= pow(1 - pid.ki_decay, 1 / dt);
		pid.err_integral += 0.5 * (pid.err + err) * dt;
		pid.err = err;
	}

	return (
		pid.kp * pid.err +
		pid.ki * pid.err_integral +
		pid.kd * pid.err_derivative);
}

// Convert input camera coordinates to delta position
Angle2 coords_to_dpos(Vector2 coords) {
	// TODO quaternions, rotations, projective geometry?
	Angle2 dpos;

	float x_scale = 0.6; // 0.6;
	float x = x_scale * coords.x;
	float y = x_scale * coords.y;

	float r = sqrt(x * x + y * y);
	float c = atan(r);

	//if (r < 1e-4) {
	//    // Good ol' nominal geodesic heat flow algebraic topological invariant sub-r module ring of finite abelian gnomic anti quarkfield
	//    dpos.phi = -XY_SCALE * coords.x * sin(curr_pos.th);
	//    dpos.th  = -XY_SCALE * coords.y;
	//}
	//else {
	//    // Gnomic projection
	//    float th = PI / 2 - curr_pos.th;

	//    dpos.phi = -atan2(x * sin(c),
	//        r * cos(th) * cos(c) - y * sin(th) * sin(c));

	//    dpos.th  = -asin(
	//        cos(c) * sin(th) +
	//        y * sin(c) * cos(th) / r);
	//}

	dpos.phi = -XY_SCALE * coords.x * sin(curr_pos.th);
	dpos.th  = -XY_SCALE * coords.y;

	return dpos;
}

void drive_pwr(int pwr_phi, int pwr_th) {
	OnFwd(MOTOR_PHI, MOTOR_PHI_POLARITY * pwr_phi);
	OnFwd(MOTOR_TH,  MOTOR_TH_POLARITY  * pwr_th);
}

// Drive to absolute position in terms of (phi, th)
void drive_to_setpoint(Angle2 setpoint, float dt, bool enable_pid) {
	// TODO predict point location in time t using velocity (store velocity in which coordinate sys?)
	// TODO smarter pathing (geodesics kappa... also use current velocity and constraints on geometry)
	// TODO resistance/drag modelling
	// TODO smarter PID? float err = setpoint - curr_pos;  // maybe compute path length?

#ifdef ENABLE_PID
	enable_pid = true;
#endif

	//static PID pid_phi;
	//static PID pid_th;
	static bool first_run = true;

	if (first_run) {
		first_run = false;
		pid_phi = PID_init(1.0, 0.05, 0.0, 0.9);
		pid_th  = PID_init(1.0, 0.05, 0.0, 0.9);
	}

	// TODO this doesn't really make too much sense...
	// the geometry means that dpos is kind of meaningless
	Angle2 err = Angle2_sub(setpoint, curr_pos);
	Angle2 dpos = err;

	if (enable_pid) {
		dpos.phi = CONSTRAIN(PID_next(pid_phi, err.phi, dt),
			-PI - curr_pos.phi, PI - curr_pos.phi);
		dpos.th  = CONSTRAIN(PID_next(pid_th,  err.th,  dt),
			-PI / 2 - curr_pos.th, PI / 2 - curr_pos.th);
	}
	else {
		first_run = true;
	}

	pwr_phi = dpos.phi * MOTOR_PHI_PWR;
	pwr_th  = dpos.th  * MOTOR_TH_PWR - GRAVITY_FACTOR * sin(curr_pos.th);

	// TODO Basic af method for quick and dirty resistance offsetting
	if (abs(err.phi) > 3.0 * PI / 180)
	pwr_phi += sign(pwr_phi) * 10;

	// TODO reduce constraints?
#ifndef ENABLE_PID_TUNE
	pwr_phi = CONSTRAIN(pwr_phi, -50, 50);
	pwr_th  = CONSTRAIN(pwr_th,  -30, 30);
#else
	pwr_phi = CONSTRAIN(pwr_phi, -100, 100);
	pwr_th  = CONSTRAIN(pwr_th,  -100, 100);
#endif

	drive_pwr(pwr_phi, pwr_th);
}

void refresh_curr_pos() {
	long encoder_phi = MotorRotationCount(MOTOR_PHI);
	long encoder_th  = MotorRotationCount(MOTOR_TH);

	curr_pos.phi = HOME_PHI +  (
		MOTOR_PHI_POLARITY * MOTOR_PHI_GEAR_RATIO * PI / 180 *
		(encoder_phi - encoder_home_phi));
	curr_pos.th  = HOME_TH  + (
		MOTOR_TH_POLARITY  * MOTOR_TH_GEAR_RATIO  * PI / 180 *
		(encoder_th  - encoder_home_th));
}

void set_home_offset() {
	encoder_home_phi = MotorRotationCount(MOTOR_PHI);
	encoder_home_th  = MotorRotationCount(MOTOR_TH);
}

InputState refresh_input() {
	InputState input_state;

	psp psp_state;
	PSP_ReadButtonState(PSP_PORT, ADDR, psp_state);

	input_state.critical_stop = !psp_state.square;
	input_state.pwr_override  = !psp_state.r1 || !psp_state.r2;
	input_state.set_home      = !psp_state.triang;
	input_state.phi           = psp_state.r_j_x;
	input_state.th            = psp_state.r_j_y;

	// TODO BADCODE
	//if(!psp_state.a) pid_phi.kp += 0.1;
	//if(!psp_state.c) pid_phi.kp -= 0.1;

	//if(!psp_state.b) pid_phi.kp += 1.0;
	//if(!psp_state.d) pid_phi.kp -= 1.0;

	return input_state;
}

char joystick_curve(char x) {
	return sign(x) * abs(x * x * x * x) / (100 * 100 * 100);
}

void process_input(InputState input_state) {
	if (input_state.critical_stop) {
		// abort();
		ForceOff(true);
	}

	if (input_state.pwr_override) {
		long phi = input_state.phi;
		pwr_phi = joystick_curve(input_state.phi) / 3;
		pwr_th  = joystick_curve(input_state.th)  / 5;
		drive_pwr(pwr_phi, pwr_th);
	}

	if (input_state.set_home) {
		set_home_offset();
	}
}

// Parses msg of format "(x,y)"
Vector2 parse_msg(string msg) {
	int idx = Pos(",", msg);
	Vector2 coords;
	coords.x = 0.001 * StrToNum(SubStr(msg, 1, idx - 1));
	coords.y = 0.001 * StrToNum(SubStr(msg, idx + 1, StrLen(msg) - idx - 2));
	return coords;
}

task main() {
	SetSleepTime(120);  // 2 hours

	ClearScreen();
	TextOut(0, LCD_LINE1, "EagleEyeTracker");
	TextOut(0, LCD_LINE2, "Please home");

	InputState input_state;

	do {
		input_state = refresh_input();
		input_state.critical_stop = false;
		process_input(input_state);
	} while (!input_state.set_home);

	do {
		input_state = refresh_input();
		input_state.critical_stop = false;
		process_input(input_state);
	} while (input_state.set_home);

	refresh_curr_pos();

	Angle2 dpos;
	Vector2 coords;
	Angle2 setpoint = curr_pos;

	unsigned long refresh_display_tick = CurrentTick();
	unsigned long msg_tick = CurrentTick();

	while (true) {
		unsigned long loop_tick = CurrentTick();

		string msg = "";
		char status = ReceiveRemoteString(INBOX, true, msg);

		if (status != STAT_MSG_EMPTY_MAILBOX) {
			msg_tick = CurrentTick();
			coords = parse_msg(msg);
			dpos = coords_to_dpos(coords);
		}

		refresh_curr_pos();

		setpoint = Angle2_add(curr_pos, dpos);
		setpoint.phi = CONSTRAIN(setpoint.phi, -PI / 2, PI / 2);
		setpoint.th  = CONSTRAIN(setpoint.th,  0.0,     PI / 2);

#ifdef ENABLE_PID_TUNE
		setpoint.phi = 0.0;
		setpoint.th  = PI / 2;
#endif

		if (refresh_display_tick + 100 <= CurrentTick()) {
			refresh_display_tick = CurrentTick();

			string status_str = msg;
			if (status == STAT_MSG_EMPTY_MAILBOX)
				status_str = "Waiting for msg";

			ClearScreen();
			TextOut(0,   LCD_LINE1, "EagleEyeTracker");
			TextOut(0,   LCD_LINE2, status_str);
			TextOut(0,   LCD_LINE3, msg);
			TextOut(0,   LCD_LINE4, "curr;set;d;pwr");
			TextOut(0,   LCD_LINE5, Angle2_str(curr_pos));
			TextOut(0,   LCD_LINE6, Angle2_str(setpoint));
			TextOut(0,   LCD_LINE7, Angle2_str(dpos));
			NumOut( 0,   LCD_LINE8, pwr_phi);
			NumOut( 6*4, LCD_LINE8, pwr_th);
		}

		input_state = refresh_input();
		process_input(input_state);

		if (!input_state.pwr_override) {
			float dt = 0.001 * (CurrentTick() - loop_tick);
			bool enable_pid = CurrentTick() - msg_tick < 250;
			drive_to_setpoint(setpoint, dt, enable_pid);
		}
	}
}

